class Solution {
    int profit = 0;
    public int recur(int index , int buy , int cap , int[] prices , int[][][] dp) {
     if(cap == 0)
       return 0;
     if(index == prices.length)
       return 0;
     if(dp[index][buy][cap] != -1)
       return dp[index][buy][cap];
     if(buy == 1) {
        int take = -prices[index] + recur(index + 1 , 0 , cap , prices , dp);
        int notTake = recur(index + 1 , 1 , cap , prices , dp);
        profit = Math.max(take , notTake);
     }
     else {
        int take = prices[index] + recur(index + 1 , 1 , cap - 1 , prices , dp);
        int notTake = recur(index + 1 , 0 , cap , prices , dp);
        profit = Math.max(take , notTake);
     }
     return dp[index][buy][cap] = profit;
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n][2][3];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < 2; j++) {
                for(int k = 0; k < 3; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return recur(0 , 1 , 2 , prices , dp);
    }
}
