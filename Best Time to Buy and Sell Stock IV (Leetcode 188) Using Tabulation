class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n + 1][2][k + 1];
        int profit = 0;
        for(int i = 0; i <= n; i++) {
            for(int buy = 0; buy < 2; buy++) {
                dp[i][buy][0] = 0;
            }
        }
        for(int buy = 0; buy < 2; buy++) {
            for(int cap = 0; cap <= k; cap++) {
                dp[n][buy][cap] = 0;
            }
        }

        for(int index = n - 1; index >= 0; index--) {
            for(int buy = 0; buy < 2; buy++) {
                for(int cap = 1; cap <= k; cap++) {
                    if(buy == 1) {
                      int take = -prices[index] + dp[index + 1][0][cap];
                      int notTake = dp[index + 1][1][cap];
                      profit = Math.max(take , notTake);
                    }
                    else {
                      int take = prices[index] + dp[index + 1][1][cap - 1];
                      int notTake = dp[index + 1][0][cap];
                      profit = Math.max(take , notTake);
                    }
                    dp[index][buy][cap] = profit;
                }
            }
        }
        return  dp[0][1][k];
    }
}
